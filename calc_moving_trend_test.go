// +build !integration

package main

import (
	"fmt"
	"reflect"
	"strings"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/ludwig125/gke-stockprice/database"
)

func TestCalcMovingTrend(t *testing.T) {
	// 	// //　ログの出力先を/dev/nullにして捨てる
	// 	// log.SetOutput(ioutil.Discard)
	// 	// //　終わったらログ出力先を標準出力に戻す
	// 	// defer log.SetOutput(os.Stdout)

	// DBの準備
	_, err := database.SetupTestDB(3306)
	// cleanup, err := database.SetupTestDB(3306) // cleanupを呼ばなければテスト後にDBを消さない
	if err != nil {
		t.Fatalf("failed to SetupTestDB: %v", err)
	}
	// defer cleanup()
	db, err := database.NewTestDB()
	if err != nil {
		t.Fatalf("failed to NewTestDB: %v", err)
	}

	t.Run("calc_moving_trend", func(t *testing.T) {
		tests := map[string]struct {
			targetDateStr string
			codes         []string
			dailyData     [][]string
			wantsMovings  [][]string
			wantsTrends   [][]string
		}{
			"1001_digit": {
				targetDateStr: "2019/10/18",
				codes:         []string{"1001"},
				dailyData: [][]string{ // 右から３番めが終値
					{"1001", "2019/10/18", "2886", "2913", "2857", "20", "15500", "2874.0"},
					{"1001", "2019/10/17", "2907", "2907", "2878", "19", "15000", "2883.0"},
					{"1001", "2019/10/16", "2902", "2932", "2892", "18", "23500", "2906.0"},
					{"1001", "2019/10/15", "2845", "2905", "2845", "17", "28300", "2902.0"},
					{"1001", "2019/10/11", "2879", "2879", "2820", "16", "21900", "2842.0"},
					{"1001", "2019/10/10", "2876", "2876", "2844", "15", "11400", "2865.0"},
					{"1001", "2019/10/09", "2850", "2865", "2827", "14", "27500", "2865.0"},
					{"1001", "2019/10/08", "2813", "2896", "2813", "13", "48900", "2876.0"},
					{"1001", "2019/10/07", "2800", "2800", "2771", "12", "17800", "2783.0"},
					{"1001", "2019/10/04", "2804", "2809", "2773", "11", "20600", "2792.0"},
				},
				wantsMovings: [][]string{
					{"1001", "2019/10/18", "19", "18", "17", "15.5", "15.5", "15.5", "15.5"},
					{"1001", "2019/10/17", "18", "17", "16", "15", "15", "15", "15"},
					{"1001", "2019/10/16", "17", "16", "15", "14.5", "14.5", "14.5", "14.5"},
					{"1001", "2019/10/15", "16", "15", "14", "14", "14", "14", "14"},
					{"1001", "2019/10/11", "15", "14", "13.5", "13.5", "13.5", "13.5", "13.5"},
					{"1001", "2019/10/10", "14", "13", "13", "13", "13", "13", "13"},
					{"1001", "2019/10/09", "13", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"},
					{"1001", "2019/10/08", "12", "12", "12", "12", "12", "12", "12"},
					{"1001", "2019/10/07", "11.5", "11.5", "11.5", "11.5", "11.5", "11.5", "11.5"},
					{"1001", "2019/10/04", "11", "11", "11", "11", "11", "11", "11"},
				},
				wantsTrends: [][]string{
					{"1001", "2019/10/18", "3", "2", "1.053", "2", "9"},
					{"1001", "2019/10/17", "3", "2", "1.056", "2", "8"},
					{"1001", "2019/10/16", "3", "2", "1.059", "2", "7"},
					{"1001", "2019/10/15", "3", "2", "1.062", "2", "6"},
					{"1001", "2019/10/11", "3", "2", "1.067", "2", "5"},
					{"1001", "2019/10/10", "3", "2", "1.071", "2", "4"},
					{"1001", "2019/10/09", "3", "2", "1.077", "2", "3"},
					{"1001", "2019/10/08", "3", "2", "1.083", "2", "2"},
					{"1001", "2019/10/07", "3", "2", "1.091", "3", "1"},
					{"1001", "2019/10/04", "3", "0", "0", "2", "0"},
				},
			},
			"1002_float": {
				targetDateStr: "2019/10/21",
				codes:         []string{"1002"},
				dailyData: [][]string{
					{"1002", "2019/10/21", "2804", "2809", "2773", "101.5", "20600", "2792.0"},
					{"1002", "2019/10/18", "2886", "2913", "2857", "102.5", "15500", "2874.0"},
					{"1002", "2019/10/17", "2907", "2907", "2878", "103.5", "15000", "2883.0"},
					{"1002", "2019/10/16", "2902", "2932", "2892", "104.5", "23500", "2906.0"},
					{"1002", "2019/10/15", "2845", "2905", "2845", "105.5", "28300", "2902.0"},
					{"1002", "2019/10/11", "2879", "2879", "2820", "106.5", "21900", "2842.0"},
					{"1002", "2019/10/10", "2876", "2876", "2844", "107.5", "11400", "2865.0"},
					{"1002", "2019/10/09", "2850", "2865", "2827", "108.5", "27500", "2865.0"},
					{"1002", "2019/10/08", "2813", "2896", "2813", "109.5", "48900", "2876.0"},
					{"1002", "2019/10/07", "2800", "2800", "2771", "110.5", "17800", "2783.0"},
					{"1002", "2019/10/04", "2804", "2809", "2773", "111.5", "20600", "2792.0"},
					{"1002", "2019/10/03", "2886", "2913", "2857", "112.5", "15500", "2874.0"},
					{"1002", "2019/10/02", "2907", "2907", "2878", "113.5", "15000", "2883.0"},
					{"1002", "2019/10/01", "2902", "2932", "2892", "114.5", "23500", "2906.0"},
					{"1002", "2019/09/30", "2845", "2905", "2845", "115.5", "28300", "2902.0"},
					{"1002", "2019/09/27", "2879", "2879", "2820", "116.5", "21900", "2842.0"},
					{"1002", "2019/09/26", "2876", "2876", "2844", "117.5", "11400", "2865.0"},
					{"1002", "2019/09/25", "2850", "2865", "2827", "118.5", "27500", "2865.0"},
					{"1002", "2019/09/24", "2813", "2896", "2813", "119.5", "48900", "2876.0"},
					{"1002", "2019/09/20", "2800", "2800", "2771", "120.5", "17800", "2783.0"},
				},
				wantsMovings: [][]string{
					{"1002", "2019/10/21", "102.5", "103.5", "104.5", "106", "111", "111", "111"},
					{"1002", "2019/10/18", "103.5", "104.5", "105.5", "107", "111.5", "111.5", "111.5"},
					{"1002", "2019/10/17", "104.5", "105.5", "106.5", "108", "112", "112", "112"},
					{"1002", "2019/10/16", "105.5", "106.5", "107.5", "109", "112.5", "112.5", "112.5"},
					{"1002", "2019/10/15", "106.5", "107.5", "108.5", "110", "113", "113", "113"},
					{"1002", "2019/10/11", "107.5", "108.5", "109.5", "111", "113.5", "113.5", "113.5"},
					{"1002", "2019/10/10", "108.5", "109.5", "110.5", "112", "114", "114", "114"},
					{"1002", "2019/10/09", "109.5", "110.5", "111.5", "113", "114.5", "114.5", "114.5"},
					{"1002", "2019/10/08", "110.5", "111.5", "112.5", "114", "115", "115", "115"},
					{"1002", "2019/10/07", "111.5", "112.5", "113.5", "115", "115.5", "115.5", "115.5"},
					{"1002", "2019/10/04", "112.5", "113.5", "114.5", "116", "116", "116", "116"},
					{"1002", "2019/10/03", "113.5", "114.5", "115.5", "116.5", "116.5", "116.5", "116.5"},
					{"1002", "2019/10/02", "114.5", "115.5", "116.5", "117", "117", "117", "117"},
					{"1002", "2019/10/01", "115.5", "116.5", "117.5", "117.5", "117.5", "117.5", "117.5"},
					{"1002", "2019/09/30", "116.5", "117.5", "118", "118", "118", "118", "118"},
					{"1002", "2019/09/27", "117.5", "118.5", "118.5", "118.5", "118.5", "118.5", "118.5"},
					{"1002", "2019/09/26", "118.5", "119", "119", "119", "119", "119", "119"},
					{"1002", "2019/09/25", "119.5", "119.5", "119.5", "119.5", "119.5", "119.5", "119.5"},
					{"1002", "2019/09/24", "120", "120", "120", "120", "120", "120", "120"},
					{"1002", "2019/09/20", "120.5", "120.5", "120.5", "120.5", "120.5", "120.5", "120.5"},
				},
				wantsTrends: [][]string{
					{"1002", "2019/10/21", "3", "2", "0.9902", "2", "11"},
					{"1002", "2019/10/18", "3", "2", "0.9903", "2", "11"},
					{"1002", "2019/10/17", "3", "2", "0.9904", "2", "11"},
					{"1002", "2019/10/16", "3", "2", "0.9905", "2", "11"},
					{"1002", "2019/10/15", "3", "2", "0.9906", "2", "11"},
					{"1002", "2019/10/11", "3", "2", "0.9907", "2", "11"},
					{"1002", "2019/10/10", "3", "2", "0.9908", "2", "11"},
					{"1002", "2019/10/09", "3", "2", "0.9909", "2", "11"},
					{"1002", "2019/10/08", "3", "2", "0.991", "2", "11"},
					{"1002", "2019/10/07", "3", "2", "0.991", "2", "10"},
					{"1002", "2019/10/04", "3", "2", "0.9911", "2", "9"},
					{"1002", "2019/10/03", "3", "2", "0.9912", "2", "8"},
					{"1002", "2019/10/02", "3", "2", "0.9913", "2", "7"},
					{"1002", "2019/10/01", "3", "2", "0.9913", "2", "6"},
					{"1002", "2019/09/30", "3", "2", "0.9914", "2", "5"},
					{"1002", "2019/09/27", "3", "2", "0.9915", "2", "4"},
					{"1002", "2019/09/26", "3", "2", "0.9916", "2", "3"},
					{"1002", "2019/09/25", "3", "2", "0.9916", "2", "2"},
					{"1002", "2019/09/24", "3", "2", "0.9917", "1", "1"},
					{"1002", "2019/09/20", "3", "0", "0", "2", "0"},
				},
			},
		}
		for name, tt := range tests {
			t.Run(name, func(t *testing.T) {
				// insert daily test data to DB
				if err := db.InsertDB("daily", tt.dailyData); err != nil {
					t.Fatalf("failed to insert daily: %v", err)
				}
				defer func() {
					t.Logf("delete: %s data from daily", tt.codes)
					if err := db.DeleteFromDB("daily", tt.codes); err != nil {
						t.Fatalf("failed to delete from daily: %v", err)
					}
					t.Logf("delete: %s data from movingavg", tt.codes)
					if err := db.DeleteFromDB("movingavg", tt.codes); err != nil {
						t.Fatalf("failed to delete from movingavg: %v", err)
					}
					t.Logf("delete: %s data from trend", tt.codes)
					if err := db.DeleteFromDB("trend", tt.codes); err != nil {
						t.Fatalf("failed to delete from trend: %v", err)
					}
				}()

				targetDate, err := time.Parse("2006/01/02", tt.targetDateStr)
				if err != nil {
					t.Fatalf("failed to parse date: %s, %v", targetDate, err)
				}
				// targetDate := makeTargetDateFromStr(tt.targetDateStr)
				fromDate := targetDate.AddDate(0, 0, -100).Format("2006/01/02")

				config := CalcMovingTrendConfig{
					DB:             db,
					DailyTable:     "daily",
					MovingAvgTable: "movingavg",
					TrendTable:     "trend",
					Codes:          tt.codes,
					FromDate:       fromDate,
					ToDate:         tt.targetDateStr,
					MaxConcurrency: 2,
					// TODO: LongTermThresholdDaysも環境変数から指定する
				}
				calc, err := NewCalcMovingTrend(config)
				if err != nil {
					t.Fatalf("failed to NewCalcMovingTrend: %v", err)
				}
				if err := calc.Exec(); err != nil {
					t.Fatalf("failed to Exec: %v", err)
				}

				movings, err := db.SelectDB("SELECT * FROM movingavg ORDER BY code, date DESC")
				if err != nil {
					t.Error("failed to select movingavg", err)
				}
				if !reflect.DeepEqual(movings, tt.wantsMovings) {
					diff := cmp.Diff(movings, tt.wantsMovings)
					t.Errorf("movings got %#v\nwant %#v\n%v", movings, tt.wantsMovings, diff)
				}

				trends, err := db.SelectDB("SELECT * FROM trend ORDER BY code, date DESC")
				if err != nil {
					t.Error("failed to select trend", err)
				}
				if !reflect.DeepEqual(trends, tt.wantsTrends) {
					diff := cmp.Diff(movings, tt.wantsTrends)
					t.Errorf("trends got %#v\nwant %#v\n%v", trends, tt.wantsTrends, diff)
				}
			})
		}
	})

	t.Run("long_range_restructure_from_daily", func(t *testing.T) {
		targetDateStr := "2020/12/20" // 実行する日
		targetDate, err := time.Parse("2006/01/02", targetDateStr)
		if err != nil {
			t.Fatal("failed to parse date", err)
		}
		dailyData := map[string][]DateClose{
			"1011": makeDailyData("1011", targetDate, 1000, closeData{n: 6, r: 1}),
			"1012": makeDailyData("1012", targetDate, 1000, closeData{n: 6, r: -1}),
			"1013": makeDailyData("1013", targetDate, 1000, closeData{n: 3, r: 1}, closeData{n: 3, r: -1}),
			"1014": makeDailyData("1014", targetDate, 1000, closeData{n: 3, r: -1}, closeData{n: 3, r: 1}),
			"1015": makeDailyData("1015", targetDate, 1000, closeData{n: 2, r: 1}, closeData{n: 2, r: 1}, closeData{n: 2, r: -1}),
			"1016": makeDailyData("1016", targetDate, 1000, closeData{n: 2, r: 1}, closeData{n: 2, r: -1}, closeData{n: 2, r: 1}),
			"1017": makeDailyData("1017", targetDate, 1000, closeData{n: 2}, closeData{n: 2, r: 1}, closeData{n: 2, r: -1}),
			"1018": makeDailyData("1018", targetDate, 1000, closeData{n: 2}, closeData{n: 2, r: -1}, closeData{n: 2, r: 1}),
		}
		wantMovingAvg := [][]string{
			{"1011", "2020/12/15", "1001", "1001", "1001", "1001", "1001", "1001", "1001"},
			{"1011", "2020/12/16", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5"},
			{"1011", "2020/12/17", "1002", "1002", "1002", "1002", "1002", "1002", "1002"},
			{"1011", "2020/12/18", "1003", "1002.5", "1002.5", "1002.5", "1002.5", "1002.5", "1002.5"},
			{"1011", "2020/12/19", "1004", "1003", "1003", "1003", "1003", "1003", "1003"},
			{"1011", "2020/12/20", "1005", "1004", "1003.5", "1003.5", "1003.5", "1003.5", "1003.5"},
			{"1012", "2020/12/15", "999", "999", "999", "999", "999", "999", "999"},
			{"1012", "2020/12/16", "998.5", "998.5", "998.5", "998.5", "998.5", "998.5", "998.5"},
			{"1012", "2020/12/17", "998", "998", "998", "998", "998", "998", "998"},
			{"1012", "2020/12/18", "997", "997.5", "997.5", "997.5", "997.5", "997.5", "997.5"},
			{"1012", "2020/12/19", "996", "997", "997", "997", "997", "997", "997"},
			{"1012", "2020/12/20", "995", "996", "996.5", "996.5", "996.5", "996.5", "996.5"},
			{"1013", "2020/12/15", "1001", "1001", "1001", "1001", "1001", "1001", "1001"},
			{"1013", "2020/12/16", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5"},
			{"1013", "2020/12/17", "1002", "1002", "1002", "1002", "1002", "1002", "1002"},
			{"1013", "2020/12/18", "1002.3333333333334", "1002", "1002", "1002", "1002", "1002", "1002"},
			{"1013", "2020/12/19", "1002", "1001.8", "1001.8", "1001.8", "1001.8", "1001.8", "1001.8"},
			{"1013", "2020/12/20", "1001", "1001.6", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5"},
			{"1014", "2020/12/15", "999", "999", "999", "999", "999", "999", "999"},
			{"1014", "2020/12/16", "998.5", "998.5", "998.5", "998.5", "998.5", "998.5", "998.5"},
			{"1014", "2020/12/17", "998", "998", "998", "998", "998", "998", "998"},
			{"1014", "2020/12/18", "997.6666666666666", "998", "998", "998", "998", "998", "998"},
			{"1014", "2020/12/19", "998", "998.2", "998.2", "998.2", "998.2", "998.2", "998.2"},
			{"1014", "2020/12/20", "999", "998.4", "998.5", "998.5", "998.5", "998.5", "998.5"},
			{"1015", "2020/12/15", "1001", "1001", "1001", "1001", "1001", "1001", "1001"},
			{"1015", "2020/12/16", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5"},
			{"1015", "2020/12/17", "1002", "1002", "1002", "1002", "1002", "1002", "1002"},
			{"1015", "2020/12/18", "1003", "1002.5", "1002.5", "1002.5", "1002.5", "1002.5", "1002.5"},
			{"1015", "2020/12/19", "1003.3333333333334", "1002.6", "1002.6", "1002.6", "1002.6", "1002.6", "1002.6"},
			{"1015", "2020/12/20", "1003", "1002.8", "1002.5", "1002.5", "1002.5", "1002.5", "1002.5"},
			{"1016", "2020/12/15", "1001", "1001", "1001", "1001", "1001", "1001", "1001"},
			{"1016", "2020/12/16", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5", "1001.5"},
			{"1016", "2020/12/17", "1001.3333333333334", "1001.3333333333334", "1001.3333333333334", "1001.3333333333334", "1001.3333333333334", "1001.3333333333334", "1001.3333333333334"},
			{"1016", "2020/12/18", "1001", "1001", "1001", "1001", "1001", "1001", "1001"},
			{"1016", "2020/12/19", "1000.6666666666666", "1001", "1001", "1001", "1001", "1001", "1001"},
			{"1016", "2020/12/20", "1001", "1001.2", "1001.1666666666666", "1001.1666666666666", "1001.1666666666666", "1001.1666666666666", "1001.1666666666666"},
			{"1017", "2020/12/15", "1000", "1000", "1000", "1000", "1000", "1000", "1000"},
			{"1017", "2020/12/16", "1000", "1000", "1000", "1000", "1000", "1000", "1000"},
			{"1017", "2020/12/17", "1000.3333333333334", "1000.3333333333334", "1000.3333333333334", "1000.3333333333334", "1000.3333333333334", "1000.3333333333334", "1000.3333333333334"},
			{"1017", "2020/12/18", "1001", "1000.75", "1000.75", "1000.75", "1000.75", "1000.75", "1000.75"},
			{"1017", "2020/12/19", "1001.3333333333334", "1000.8", "1000.8", "1000.8", "1000.8", "1000.8", "1000.8"},
			{"1017", "2020/12/20", "1001", "1000.8", "1000.6666666666666", "1000.6666666666666", "1000.6666666666666", "1000.6666666666666", "1000.6666666666666"},
			{"1018", "2020/12/15", "1000", "1000", "1000", "1000", "1000", "1000", "1000"},
			{"1018", "2020/12/16", "1000", "1000", "1000", "1000", "1000", "1000", "1000"},
			{"1018", "2020/12/17", "999.6666666666666", "999.6666666666666", "999.6666666666666", "999.6666666666666", "999.6666666666666", "999.6666666666666", "999.6666666666666"},
			{"1018", "2020/12/18", "999", "999.25", "999.25", "999.25", "999.25", "999.25", "999.25"},
			{"1018", "2020/12/19", "998.6666666666666", "999.2", "999.2", "999.2", "999.2", "999.2", "999.2"},
			{"1018", "2020/12/20", "999", "999.2", "999.3333333333334", "999.3333333333334", "999.3333333333334", "999.3333333333334", "999.3333333333334"},
		}
		wantTrend := [][]string{
			{"1011", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1011", "2020/12/16", "3", "2", "1.001", "3", "1"},
			{"1011", "2020/12/17", "3", "2", "1.001", "2", "2"},
			{"1011", "2020/12/18", "3", "2", "1.001", "2", "3"},
			{"1011", "2020/12/19", "3", "2", "1.001", "2", "4"},
			{"1011", "2020/12/20", "3", "2", "1.001", "2", "5"},
			{"1012", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1012", "2020/12/16", "3", "2", "0.999", "1", "1"},
			{"1012", "2020/12/17", "3", "2", "0.999", "2", "2"},
			{"1012", "2020/12/18", "3", "2", "0.999", "2", "3"},
			{"1012", "2020/12/19", "3", "2", "0.999", "2", "4"},
			{"1012", "2020/12/20", "3", "2", "0.999", "2", "5"},
			{"1013", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1013", "2020/12/16", "3", "2", "1.001", "3", "1"},
			{"1013", "2020/12/17", "3", "2", "1.001", "2", "2"},
			{"1013", "2020/12/18", "3", "2", "0.999", "2", "1"},
			{"1013", "2020/12/19", "3", "2", "0.999", "1", "2"},
			{"1013", "2020/12/20", "3", "2", "0.999", "2", "3"},
			{"1014", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1014", "2020/12/16", "3", "2", "0.999", "1", "1"},
			{"1014", "2020/12/17", "3", "2", "0.999", "2", "2"},
			{"1014", "2020/12/18", "3", "2", "1.001", "2", "1"},
			{"1014", "2020/12/19", "3", "2", "1.001", "3", "2"},
			{"1014", "2020/12/20", "3", "2", "1.001", "2", "3"},
			{"1015", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1015", "2020/12/16", "3", "2", "1.001", "3", "1"},
			{"1015", "2020/12/17", "3", "2", "1.001", "2", "2"},
			{"1015", "2020/12/18", "3", "2", "1.001", "2", "3"},
			{"1015", "2020/12/19", "3", "2", "0.999", "2", "1"},
			{"1015", "2020/12/20", "3", "2", "0.999", "1", "2"},
			{"1016", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1016", "2020/12/16", "3", "2", "1.001", "3", "1"},
			{"1016", "2020/12/17", "3", "2", "0.999", "1", "1"},
			{"1016", "2020/12/18", "3", "2", "0.999", "2", "2"},
			{"1016", "2020/12/19", "3", "2", "1.001", "2", "1"},
			{"1016", "2020/12/20", "3", "2", "1.001", "3", "2"},
			{"1017", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1017", "2020/12/16", "3", "2", "1", "2", "0"},
			{"1017", "2020/12/17", "3", "2", "1.001", "3", "1"},
			{"1017", "2020/12/18", "3", "2", "1.001", "2", "2"},
			{"1017", "2020/12/19", "3", "2", "0.999", "2", "1"},
			{"1017", "2020/12/20", "3", "2", "0.999", "1", "2"},
			{"1018", "2020/12/15", "3", "0", "0", "2", "0"},
			{"1018", "2020/12/16", "3", "2", "1", "2", "0"},
			{"1018", "2020/12/17", "3", "2", "0.999", "1", "1"},
			{"1018", "2020/12/18", "3", "2", "0.999", "2", "2"},
			{"1018", "2020/12/19", "3", "2", "1.001", "2", "1"},
			{"1018", "2020/12/20", "3", "2", "1.001", "3", "2"},
		}

		var inputsDaily [][]string
		for code, dateCloses := range dailyData {
			inputsDaily = append(inputsDaily, convertDateClosesToStringSlice(code, dateCloses)...)
		}
		if err := db.InsertDB("daily", inputsDaily); err != nil {
			t.Fatalf("failed to insert daily: %v", err)
		}

		tests := map[string]struct {
			config     CalcMovingTrendConfig
			wantErr    bool
			wantmoving [][]string
			wanttrend  [][]string
		}{
			"MaxConcurrency_1": {
				config: CalcMovingTrendConfig{
					DB:             db,
					DailyTable:     "daily",
					MovingAvgTable: "movingavg",
					TrendTable:     "trend",
					Codes:          []string{"1011", "1012", "1013", "1014", "1015", "1016", "1017", "1018"},
					FromDate:       "2020/12/15",
					ToDate:         "2020/12/20",
					MaxConcurrency: 1,
				},
				wantErr:    false,
				wantmoving: wantMovingAvg,
				wanttrend:  wantTrend,
			},
			"MaxConcurrency_3": {
				config: CalcMovingTrendConfig{
					DB:             db,
					DailyTable:     "daily",
					MovingAvgTable: "movingavg",
					TrendTable:     "trend",
					Codes:          []string{"1011", "1012", "1013", "1014", "1015", "1016", "1017", "1018"},
					FromDate:       "2020/12/15",
					ToDate:         "2020/12/20",
					MaxConcurrency: 3,
				},
				wantErr:    false,
				wantmoving: wantMovingAvg,
				wanttrend:  wantTrend,
			},
			"MaxConcurrency_3_targetCode_1011_1013_1015": {
				config: CalcMovingTrendConfig{
					DB:             db,
					DailyTable:     "daily",
					MovingAvgTable: "movingavg",
					TrendTable:     "trend",
					Codes:          []string{"1011", "1013", "1015"},
					FromDate:       "2020/12/15",
					ToDate:         "2020/12/20",
					MaxConcurrency: 3,
				},
				wantErr:    false,
				wantmoving: filterTargetCodeData(wantMovingAvg, []string{"1011", "1013", "1015"}),
				wanttrend:  filterTargetCodeData(wantTrend, []string{"1011", "1013", "1015"}),
			},
			// "filter_date": {
			// 	config: RestructureTablesFromDailyConfig{
			// 		DB:                   db,
			// 		DailyTable:           "daily",
			// 		MovingAvgTable:       "movingavg",
			// 		TrendTable:           "trend",
			// 		Codes:                []string{"1011", "1012", "1013", "1014", "1015", "1016", "1017", "1018"},
			// 		RestructureMovingavg: true,
			// 		RestructureTrend:     true,
			// 		FromDate:             "2020/12/16",
			// 		ToDate:               "2020/12/19",
			// 		MaxConcurrency:       3,
			// 	},
			// 	wantErr:    false,
			// 	wantmoving: filterDate(wantMovingAvg, "2020/12/16", "2020/12/19"),
			// 	wanttrend:  filterDate(wantTrend, "2020/12/16", "2020/12/19"),
			// },
			"invalidTable": {
				config: CalcMovingTrendConfig{
					DB:             db,
					DailyTable:     "daily",
					MovingAvgTable: "movingavg_test",
					TrendTable:     "trend_test",
					Codes:          []string{"1011", "1013", "1015"},
					FromDate:       "2020/12/15",
					ToDate:         "2020/12/20",
					MaxConcurrency: 3,
				},
				wantErr: true,
			},
		}
		for name, tc := range tests {
			t.Run(name, func(t *testing.T) {
				defer db.DeleteFromDB(tc.config.MovingAvgTable, tc.config.Codes)
				defer db.DeleteFromDB(tc.config.TrendTable, tc.config.Codes)

				r, err := NewCalcMovingTrend(tc.config)
				if err != nil {
					t.Fatalf("failed to NewRestructureTablesFromDaily: %v", err)
				}
				err = r.Exec()
				if (err != nil) != tc.wantErr {
					t.Errorf("error: %v, wantErr: %t", err, tc.wantErr)
					return
				}
				if err != nil {
					t.Log(err)
					return // エラーがある場合はこのあとの処理はしない
				}

				moving, err := db.SelectDB("SELECT * FROM " + tc.config.MovingAvgTable)
				if err != nil {
					t.Error(err)
				}
				if !compare2dSlices(moving, tc.wantmoving) {
					for _, v := range moving {
						fmt.Println("moving", v)
					}
					t.Errorf("got %#v, want %#v", moving, tc.wantmoving)
				}

				trend, err := db.SelectDB("SELECT * FROM " + tc.config.TrendTable)
				if err != nil {
					t.Error(err)
				}
				if !compare2dSlices(trend, tc.wanttrend) {
					t.Errorf("got %#v, want %#v", trend, tc.wanttrend)
					// diff := cmp.Diff(trend, tc.wanttrend)
					// t.Errorf("got %#v\nwant %#v\n%v", trend, tc.wanttrend, diff)
				}
			})
		}
	})
}

func filterTargetCodeData(data [][]string, targetCodes []string) [][]string {
	var ss [][]string
	for _, v := range data {
		if isInTargetCode(v[0], targetCodes) {
			ss = append(ss, v)
		}
	}
	return ss
}

func isInTargetCode(code string, targetCodes []string) bool {
	for _, c := range targetCodes {
		if c == code {
			return true
		}
	}
	return false
}

// TODO: 単純にフィルターするとだめ
// 日付が変わった分、movingなどの計算結果も変わる
// func filterDate(data [][]string, fromDate, toDate string) [][]string {
// 	var ss [][]string
// 	for _, v := range data {
// 		date := v[1]
// 		if date >= fromDate && date <= toDate {
// 			// fmt.Println("date", date, fromDate, toDate)
// 			ss = append(ss, v)
// 		}
// 	}
// 	return ss
// }

func compare2dSlices(ret, inputs [][]string) bool {
	// DeepEqualはsliceの順序までみて一致を判定するのでSliceをMapに変換する
	sliceToMap := func(s [][]string) map[string]bool {
		m := make(map[string]bool)
		for i := 0; i < len(s); i++ {
			// 簡単のため１レコードは全て結合して１つの文字列にしている
			m[strings.Join(s[i], "")] = true
		}
		return m
	}
	return reflect.DeepEqual(sliceToMap(ret), sliceToMap(inputs))
}
