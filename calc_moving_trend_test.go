package main

import (
	"reflect"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/ludwig125/gke-stockprice/database"
)

func TestCalcMovingTrend(t *testing.T) {
	// targetDateStr := "2020/12/20" // 実行する日。またはその時点のTrendを取得したい日
	// targetDate, err := time.Parse("2006/01/02", targetDateStr)
	// if err != nil {
	// 	t.Fatal("failed to parse date", err)
	// }

	// DBの準備
	_, err := database.SetupTestDB(3306)
	// cleanup, err := database.SetupTestDB(3306) // cleanupを呼ばなければテスト後にDBを消さない
	if err != nil {
		t.Fatalf("failed to SetupTestDB: %v", err)
	}
	// defer cleanup()
	db, err := database.NewTestDB()
	if err != nil {
		t.Fatalf("failed to NewTestDB: %v", err)
	}

	testsMoving := map[string]struct {
		dailyData [][]string
		wants     [][]string
	}{
		"1001_digit": {
			dailyData: [][]string{
				{"1001", "2019/10/18", "2886", "2913", "2857", "20", "15500", "2874.0"},
				{"1001", "2019/10/17", "2907", "2907", "2878", "19", "15000", "2883.0"},
				{"1001", "2019/10/16", "2902", "2932", "2892", "18", "23500", "2906.0"},
				{"1001", "2019/10/15", "2845", "2905", "2845", "17", "28300", "2902.0"},
				{"1001", "2019/10/11", "2879", "2879", "2820", "16", "21900", "2842.0"},
				{"1001", "2019/10/10", "2876", "2876", "2844", "15", "11400", "2865.0"},
				{"1001", "2019/10/09", "2850", "2865", "2827", "14", "27500", "2865.0"},
				{"1001", "2019/10/08", "2813", "2896", "2813", "13", "48900", "2876.0"},
				{"1001", "2019/10/07", "2800", "2800", "2771", "12", "17800", "2783.0"},
				{"1001", "2019/10/04", "2804", "2809", "2773", "11", "20600", "2792.0"},
				// {"1002", "2019/10/21", "2804", "2809", "2773", "101.5", "20600", "2792.0"},
				// {"1002", "2019/10/18", "2886", "2913", "2857", "102.5", "15500", "2874.0"},
				// {"1002", "2019/10/17", "2907", "2907", "2878", "103.5", "15000", "2883.0"},
				// {"1002", "2019/10/16", "2902", "2932", "2892", "104.5", "23500", "2906.0"},
				// {"1002", "2019/10/15", "2845", "2905", "2845", "105.5", "28300", "2902.0"},
				// {"1002", "2019/10/11", "2879", "2879", "2820", "106.5", "21900", "2842.0"},
				// {"1002", "2019/10/10", "2876", "2876", "2844", "107.5", "11400", "2865.0"},
				// {"1002", "2019/10/09", "2850", "2865", "2827", "108.5", "27500", "2865.0"},
				// {"1002", "2019/10/08", "2813", "2896", "2813", "109.5", "48900", "2876.0"},
				// {"1002", "2019/10/07", "2800", "2800", "2771", "110.5", "17800", "2783.0"},
				// {"1002", "2019/10/04", "2804", "2809", "2773", "111.5", "20600", "2792.0"},
				// {"1002", "2019/10/03", "2886", "2913", "2857", "112.5", "15500", "2874.0"},
				// {"1002", "2019/10/02", "2907", "2907", "2878", "113.5", "15000", "2883.0"},
				// {"1002", "2019/10/01", "2902", "2932", "2892", "114.5", "23500", "2906.0"},
				// {"1002", "2019/09/30", "2845", "2905", "2845", "115.5", "28300", "2902.0"},
				// {"1002", "2019/09/27", "2879", "2879", "2820", "116.5", "21900", "2842.0"},
				// {"1002", "2019/09/26", "2876", "2876", "2844", "117.5", "11400", "2865.0"},
				// {"1002", "2019/09/25", "2850", "2865", "2827", "118.5", "27500", "2865.0"},
				// {"1002", "2019/09/24", "2813", "2896", "2813", "119.5", "48900", "2876.0"},
				// {"1002", "2019/09/20", "2800", "2800", "2771", "120.5", "17800", "2783.0"},
			},
			wants: [][]string{
				{"1001", "2019/10/18", "19", "18", "17", "15.5", "15.5", "15.5", "15.5"},
				{"1001", "2019/10/17", "18", "17", "16", "15", "15", "15", "15"},
				{"1001", "2019/10/16", "17", "16", "15", "14.5", "14.5", "14.5", "14.5"},
				{"1001", "2019/10/15", "16", "15", "14", "14", "14", "14", "14"},
				{"1001", "2019/10/11", "15", "14", "13.5", "13.5", "13.5", "13.5", "13.5"},
				{"1001", "2019/10/10", "14", "13", "13", "13", "13", "13", "13"},
				{"1001", "2019/10/09", "13", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"},
				{"1001", "2019/10/08", "12", "12", "12", "12", "12", "12", "12"},
				{"1001", "2019/10/07", "11.5", "11.5", "11.5", "11.5", "11.5", "11.5", "11.5"},
				{"1001", "2019/10/04", "11", "11", "11", "11", "11", "11", "11"},
			},
		},
	}
	for name, tt := range testsMoving {
		t.Run(name, func(t *testing.T) {
			// insert daily test data to DB
			if err := db.InsertDB("daily", tt.dailyData); err != nil {
				t.Fatalf("failed to insert daily: %v", err)
			}

			targetDateStr := "2019/10/18"
			targetDate, err := time.Parse("2006/01/02", targetDateStr)
			if err != nil {
				t.Fatalf("failed to parse date: %s, %v", targetDate, err)
			}
			fromDate := targetDate.AddDate(0, 0, -100).Format("2006/01/02")

			config := CalcMovingTrendConfig{
				DB:             db,
				DailyTable:     "daily",
				MovingAvgTable: "movingavg",
				TrendTable:     "trend",
				Codes:          []string{"1001"},
				FromDate:       fromDate,
				ToDate:         targetDateStr,
				MaxConcurrency: 2,
				// TODO: LongTermThresholdDaysも環境変数から指定する
			}
			calc, err := NewCalcMovingTrend(config)
			if err != nil {
				t.Fatalf("failed to NewCalcMovingTrend: %v", err)
			}
			if err := calc.Exec(); err != nil {
				t.Fatalf("failed to Exec: %v", err)
			}

			got, err := db.SelectDB("SELECT * FROM movingavg ORDER BY code, date DESC")
			if err != nil {
				t.Error(err)
			}
			if !reflect.DeepEqual(got, tt.wants) {
				diff := cmp.Diff(got, tt.wants)
				t.Errorf("got %#v\nwant %#v\n%v", got, tt.wants, diff)
			}
		})
	}

}
