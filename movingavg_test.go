package main

import (
	"fmt"
	"reflect"
	"testing"
)

func TestCalculateEachMovingAvg(t *testing.T) {
	defer SetupTestDB(t)()

	db := NewTestDB(t)

	inputs := [][]string{
		[]string{"1001", "2019/10/18", "2886", "2913", "2857", "20", "15500", "2874.0"},
		[]string{"1001", "2019/10/17", "2907", "2907", "2878", "19", "15000", "2883.0"},
		[]string{"1001", "2019/10/16", "2902", "2932", "2892", "18", "23500", "2906.0"},
		[]string{"1001", "2019/10/15", "2845", "2905", "2845", "17", "28300", "2902.0"},
		[]string{"1001", "2019/10/11", "2879", "2879", "2820", "16", "21900", "2842.0"},
		[]string{"1001", "2019/10/10", "2876", "2876", "2844", "15", "11400", "2865.0"},
		[]string{"1001", "2019/10/09", "2850", "2865", "2827", "14", "27500", "2865.0"},
		[]string{"1001", "2019/10/08", "2813", "2896", "2813", "13", "48900", "2876.0"},
		[]string{"1001", "2019/10/07", "2800", "2800", "2771", "12", "17800", "2783.0"},
		[]string{"1001", "2019/10/04", "2804", "2809", "2773", "11", "20600", "2792.0"},
		[]string{"1002", "2019/10/21", "2804", "2809", "2773", "101.5", "20600", "2792.0"},
		[]string{"1002", "2019/10/18", "2886", "2913", "2857", "102.5", "15500", "2874.0"},
		[]string{"1002", "2019/10/17", "2907", "2907", "2878", "103.5", "15000", "2883.0"},
		[]string{"1002", "2019/10/16", "2902", "2932", "2892", "104.5", "23500", "2906.0"},
		[]string{"1002", "2019/10/15", "2845", "2905", "2845", "105.5", "28300", "2902.0"},
		[]string{"1002", "2019/10/11", "2879", "2879", "2820", "106.5", "21900", "2842.0"},
		[]string{"1002", "2019/10/10", "2876", "2876", "2844", "107.5", "11400", "2865.0"},
		[]string{"1002", "2019/10/09", "2850", "2865", "2827", "108.5", "27500", "2865.0"},
		[]string{"1002", "2019/10/08", "2813", "2896", "2813", "109.5", "48900", "2876.0"},
		[]string{"1002", "2019/10/07", "2800", "2800", "2771", "110.5", "17800", "2783.0"},
		[]string{"1002", "2019/10/04", "2804", "2809", "2773", "111.5", "20600", "2792.0"},
		[]string{"1002", "2019/10/03", "2886", "2913", "2857", "112.5", "15500", "2874.0"},
		[]string{"1002", "2019/10/02", "2907", "2907", "2878", "113.5", "15000", "2883.0"},
		[]string{"1002", "2019/10/01", "2902", "2932", "2892", "114.5", "23500", "2906.0"},
		[]string{"1002", "2019/09/30", "2845", "2905", "2845", "115.5", "28300", "2902.0"},
		[]string{"1002", "2019/09/27", "2879", "2879", "2820", "116.5", "21900", "2842.0"},
		[]string{"1002", "2019/09/26", "2876", "2876", "2844", "117.5", "11400", "2865.0"},
		[]string{"1002", "2019/09/25", "2850", "2865", "2827", "118.5", "27500", "2865.0"},
		[]string{"1002", "2019/09/24", "2813", "2896", "2813", "119.5", "48900", "2876.0"},
		[]string{"1002", "2019/09/20", "2800", "2800", "2771", "120.5", "17800", "2783.0"},
	}
	if err := db.InsertDB("daily", inputs); err != nil {
		t.Error(err)
	}

	testcases := []struct {
		name          string
		code          string
		wantMovingavg [][]string
	}{
		{
			"1001_digit",
			"1001",
			[][]string{
				[]string{"1001", "2019/10/18", "19", "18", "17", "15.5", "15.5", "15.5", "15.5"},
				[]string{"1001", "2019/10/17", "18", "17", "16", "15", "15", "15", "15"},
				[]string{"1001", "2019/10/16", "17", "16", "15", "14.5", "14.5", "14.5", "14.5"},
				[]string{"1001", "2019/10/15", "16", "15", "14", "14", "14", "14", "14"},
				[]string{"1001", "2019/10/11", "15", "14", "13.5", "13.5", "13.5", "13.5", "13.5"},
				[]string{"1001", "2019/10/10", "14", "13", "13", "13", "13", "13", "13"},
				[]string{"1001", "2019/10/09", "13", "12.5", "12.5", "12.5", "12.5", "12.5", "12.5"},
				[]string{"1001", "2019/10/08", "12", "12", "12", "12", "12", "12", "12"},
				[]string{"1001", "2019/10/07", "11.5", "11.5", "11.5", "11.5", "11.5", "11.5", "11.5"},
				[]string{"1001", "2019/10/04", "11", "11", "11", "11", "11", "11", "11"},
			},
		},
		{
			"1002_float",
			"1002",
			[][]string{
				[]string{"1002", "2019/10/21", "102.5", "103.5", "104.5", "106", "111", "111", "111"},
				[]string{"1002", "2019/10/18", "103.5", "104.5", "105.5", "107", "111.5", "111.5", "111.5"},
				[]string{"1002", "2019/10/17", "104.5", "105.5", "106.5", "108", "112", "112", "112"},
				[]string{"1002", "2019/10/16", "105.5", "106.5", "107.5", "109", "112.5", "112.5", "112.5"},
				[]string{"1002", "2019/10/15", "106.5", "107.5", "108.5", "110", "113", "113", "113"},
				[]string{"1002", "2019/10/11", "107.5", "108.5", "109.5", "111", "113.5", "113.5", "113.5"},
				[]string{"1002", "2019/10/10", "108.5", "109.5", "110.5", "112", "114", "114", "114"},
				[]string{"1002", "2019/10/09", "109.5", "110.5", "111.5", "113", "114.5", "114.5", "114.5"},
				[]string{"1002", "2019/10/08", "110.5", "111.5", "112.5", "114", "115", "115", "115"},
				[]string{"1002", "2019/10/07", "111.5", "112.5", "113.5", "115", "115.5", "115.5", "115.5"},
				[]string{"1002", "2019/10/04", "112.5", "113.5", "114.5", "116", "116", "116", "116"},
				[]string{"1002", "2019/10/03", "113.5", "114.5", "115.5", "116.5", "116.5", "116.5", "116.5"},
				[]string{"1002", "2019/10/02", "114.5", "115.5", "116.5", "117", "117", "117", "117"},
				[]string{"1002", "2019/10/01", "115.5", "116.5", "117.5", "117.5", "117.5", "117.5", "117.5"},
				[]string{"1002", "2019/09/30", "116.5", "117.5", "118", "118", "118", "118", "118"},
				[]string{"1002", "2019/09/27", "117.5", "118.5", "118.5", "118.5", "118.5", "118.5", "118.5"},
				[]string{"1002", "2019/09/26", "118.5", "119", "119", "119", "119", "119", "119"},
				[]string{"1002", "2019/09/25", "119.5", "119.5", "119.5", "119.5", "119.5", "119.5", "119.5"},
				[]string{"1002", "2019/09/24", "120", "120", "120", "120", "120", "120", "120"},
				[]string{"1002", "2019/09/20", "120.5", "120.5", "120.5", "120.5", "120.5", "120.5", "120.5"},
			},
		},
	}
	for _, tt := range testcases {
		t.Run(tt.name, func(t *testing.T) {
			if err := calculateEachMovingAvg(db, tt.code); err != nil {
				t.Error(err)
			}
			got, err := db.SelectDB(fmt.Sprintf("SELECT * FROM movingavg WHERE code = '%s' ORDER BY date DESC", tt.code))
			if err != nil {
				t.Error(err)
			}
			if !reflect.DeepEqual(got, tt.wantMovingavg) {
				t.Errorf("got %#v\nwant %#v", got, tt.wantMovingavg)
			}
		})
	}
}
