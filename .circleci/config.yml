version: 2
jobs:
  test:
    docker:
      - image: circleci/golang:1.13
      # CircleCI MySQL Image https://hub.docker.com/r/circleci/mysql/tags
      # https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:8.0.4
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    #parallelism: 2 # testの並列実行
    environment:
      TZ: Asia/Tokyo # timezoneが合っていないとtestが失敗する
    steps:
      - checkout
      - restore_cache: # 前回の実行以降の変更が検出されなかった場合、保存されているキャッシュを復元
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
        # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: test
          #command: go test -v slack.go slack_test.go
          #command: go test -v database/database*
          command: |
            go test -v -race -p 1 ./...
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            # go modで取得したバイナリなどは$GOPATH/pkg/mod/以下にキャッシュされる
            - "/go/pkg/mod"

  build:
    environment:
      PROJECT_NAME: gke-stockprice
      IMAGE_NAME: gke-stockprice
    docker:
      - image: google/cloud-sdk
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Setup CLOUD SDK
          command: |
            # base64 -i ignore non-alphabet characters
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud --quiet auth configure-docker
      - run:
          name: Docker Build & Push
          command: |
            docker build -t us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} .
            docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:latest
            if [ -n "${CIRCLE_TAG}" ]; then
              docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_TAG}
            fi
            docker push us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}

  build-nikkei-mock:
    environment:
      PROJECT_NAME: gke-stockprice
      IMAGE_NAME: gke-nikkei-mock
    docker:
      - image: google/cloud-sdk
    working_directory: /go/src/github.com/ludwig125/gke-stockprice/nikkei-mock
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Setup CLOUD SDK
          command: |
            # base64 -i ignore non-alphabet characters
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud --quiet auth configure-docker
      - run:
          name: Docker Build & Push
          command: |
            docker build -t us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} .
            docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:latest
            if [ -n "${CIRCLE_TAG}" ]; then
              docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_TAG}
            fi
            docker push us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}

  integration-test:
    docker:
      - image: google/cloud-sdk
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    environment:
      TZ: Asia/Tokyo # timezoneが合っていないとtestが失敗する
      GO_VERSION: 1.14.1
      PROJECT_NAME: gke-stockprice
    steps:
      - checkout
      - run:
          name: Install wget
          command: |
            apt-get install -y wget
      - run:
          name: Install go
          command: |
            wget https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz
            tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV
            source $BASH_ENV
            go version
      - run:
          name: Install cloud_sql_proxy
          command: |
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            ls -l ./cloud_sql_proxy
      - run:
          name: Install kustomize
          # ref. https://github.com/kubernetes-sigs/kustomize/blob/master/docs/INSTALL.md#quickly-curl-the-latest-binary
          command: |
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            ./kustomize version
      - run:
          name: Activate Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > gke-stockprice-serviceaccount.json
            gcloud auth activate-service-account --key-file gke-stockprice-serviceaccount.json
            gcloud config set project $PROJECT_NAME
      - run:
          name: Set files
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > ./k8s/base/gke-stockprice-serviceaccount.json # integration_test内でkustomize buildするため
            echo -n $INTEGRATION_TEST_SHEETID > k8s/overlays/dev/dev_sheetid.txt
      - run:
          name: Integration-test
          no_output_timeout: 30m # これを防ぐ：Too long with no output (exceeded 10m0s)
          command: |
            SHEET_CREDENTIAL=gke-stockprice-serviceaccount.json INTEGRATION_TEST_SHEETID=$INTEGRATION_TEST_SHEETID go test -v ./... -tags integration -run=TestGKEStockPrice -timeout 30m

  create_gke_cluster:
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    environment:
      PROJECT_NAME: gke-stockprice
      CLOUDSQL_INSTANCE: gke-stockprice-cloudsql-prod
      CLUSTER_NAME: gke-stockprice-cluster-prod
      COMPUTE_ZONE: us-central1-f
      #MACHINE_TYPE: n1-standard-4
      MACHINE_TYPE: g1-small
      NUM_NODES: 2
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - checkout
      - run:
          name: Set gcloud
          command: |
            # cloud-sdk:alpineの場合はbase64 -iがない
            echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/service_account.json
            gcloud auth activate-service-account --key-file ${HOME}/service_account.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project ${PROJECT_NAME}
            gcloud config set compute/zone ${COMPUTE_ZONE}
      - run:
          name: Check Cloud SQL Instance
          command: |
            # cloud sql instanceの存在確認
            # gcloud sql instances listの結果が0だと、`Listed 0 items.`が出力されるので/dev/nullに捨てる
            if [ `gcloud sql instances list 2> /dev/null | grep $CLOUDSQL_INSTANCE | wc -l` -eq 0 ]; then
                echo "failed to find cloudsql instance:" $CLOUDSQL_INSTANCE
                return 1
            fi
      - run:
          name: Create GKE Cluster
          no_output_timeout: 20m # これを防ぐ：Too long with no output (exceeded 10m0s)
          command: |
            if [ `gcloud container clusters list | grep $CLUSTER_NAME | wc -l` == 1 ]; then
                # clusterが存在する場合、ERRORになっていないか確認
                if [ `gcloud container clusters describe $CLUSTER_NAME | grep 'ERROR' | wc -l` != 0 ]; then
                    # うまく作れていないときは消してからもう一度作る
                    gcloud --quiet container clusters delete $CLUSTER_NAME
                    gcloud --quiet container clusters create $CLUSTER_NAME \
                    --machine-type=$MACHINE_TYPE --disk-size 10 --zone $COMPUTE_ZONE \
                    --num-nodes=$NUM_NODES
                fi
            elif [ `gcloud container clusters list | grep $CLUSTER_NAME | wc -l` == 0 ]; then
                # clusterが存在しない場合はcreate
                # --quiet をつけないと作成するかどうかy/nの入力を求める表示が出る
                gcloud --quiet container clusters create $CLUSTER_NAME \
                --machine-type=$MACHINE_TYPE --disk-size 10 --zone $COMPUTE_ZONE \
                --num-nodes=$NUM_NODES
            else
                echo "$CLUSTER_NAME cluster already exists"
            fi
      - run:
          name: Check GKE Cluster
          command: gcloud container clusters list

  deploy_gke_stockprice:
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    environment:
      PROJECT_NAME: gke-stockprice
      CLUSTER_NAME: gke-stockprice-cluster-prod
      COMPUTE_ZONE: us-central1-f
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Setup CLOUD SDK
          command: |
            # base64 -i ignore non-alphabet characters
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project $PROJECT_NAME
            gcloud config set container/cluster $CLUSTER_NAME
            gcloud config set compute/zone ${COMPUTE_ZONE}
            gcloud container clusters get-credentials $CLUSTER_NAME
      - run:
          name: Create config & secret
          command: |
            echo ${GCLOUD_SERVICE_KEY} | base64 -di > ./k8s/base/gke-stockprice-serviceaccount.json
            echo -n ${DAILY_PRICE_URL} > ./k8s/overlays/prod/daily_price_url.txt
            echo -n ${PROD_DB_USERNAME} > ./k8s/overlays/prod/db_username.txt
            echo -n ${PROD_DB_PASSWORD} > ./k8s/overlays/prod/db_password.txt
            echo -n ${PROD_SHEET_ID} > ./k8s/overlays/prod/sheetid.txt
            echo -n ${SLACK_TOKEN} > ./k8s/overlays/prod/slack_token.txt
            echo -n ${SLACK_CHANNEL} > ./k8s/overlays/prod/slack_channel.txt
            echo -n ${CIRCLE_API_USER_TOKEN} > ./k8s/overlays/prod/circleci_token.txt
      - run:
          name: Install kustomize
          # ref. https://github.com/kubernetes-sigs/kustomize/blob/master/docs/INSTALL.md#quickly-curl-the-latest-binary
          command: |
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            ./kustomize version
      - deploy:
          name: Kustomize build and Apply
          command: ./kustomize build ./k8s/overlays/prod/ | kubectl apply -f -

  delete_gke_cluster:
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    environment:
      PROJECT_NAME: gke-stockprice
      CLUSTER_NAME: gke-stockprice-cluster-prod
      COMPUTE_ZONE: us-central1-f
      CRON_JOB: prod-gke-stockprice
    docker:
      - image: google/cloud-sdk # kubectlを使うのでalpineではない
    steps:
      - checkout
      - run:
          name: Set gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/service_account.json
            gcloud auth activate-service-account --key-file ${HOME}/service_account.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project $PROJECT_NAME
            gcloud config set container/cluster $CLUSTER_NAME
            gcloud config set compute/zone ${COMPUTE_ZONE}
            gcloud container clusters get-credentials $CLUSTER_NAME
      - run:
          name: Delete GKE Cluster
          command: |
            # clusterが存在する場合のみdelete
            if [ `gcloud container clusters list | grep $CLUSTER_NAME | wc -l` == 1 ]; then
              # clusterが存在してもStop中のこともあるのでRUNNINGのときだけdelete
              if [ `gcloud container clusters describe $CLUSTER_NAME | grep 'RUNNING' | wc -l` -gt 0 ]; then
                if [ `kubectl get cronjobs 2> /dev/null | grep $CRON_JOB | wc -l` == 1 ]; then
                  # deleteには時間がかかるので先にcronjobを消す
                  kubectl delete cronjob $CRON_JOB
                fi
                # clusterの削除
                # --quiet をつけないと削除するかどうかy/nの入力を求める表示が出る
                gcloud --quiet container clusters delete $CLUSTER_NAME
              fi
            else
              echo "$CLUSTER_NAME cluster does not exist"
            fi
      - run:
          name: Check GKE Cluster
          command: gcloud container clusters list

  list_gke_cluster:
    working_directory: /go/src/github.com/ludwig125/gke-stockprice
    environment:
      PROJECT_NAME: gke-stockprice
      CLUSTER_NAME: gke-stockprice-cluster-prod
      COMPUTE_ZONE: us-central1-f
      CRON_JOB: prod-gke-stockprice
    docker:
      - image: google/cloud-sdk # base64 -iオプションを使うのでalpineではない
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/service_account.json
            gcloud auth activate-service-account --key-file ${HOME}/service_account.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project $PROJECT_NAME
            gcloud config set container/cluster $CLUSTER_NAME
            gcloud config set compute/zone ${COMPUTE_ZONE}
            gcloud container clusters get-credentials $CLUSTER_NAME
      - run:
          name: List GKE Cluster
          command: gcloud container clusters list

workflows:
  version: 2
  master-build:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only: master
      # # buildのあとにdeployを実行したい場合は以下を有効にする
      # - deploy:
      #     requires:
      #       - build

      # integration testを自動で実行したいときは以下を有効にする
      - integration-test:
          requires:
           - build

  # cronで定期実行する
  create-deploy:
    triggers:
      - schedule:
          cron: "0 18 * * *" # 3:00 at JST
          filters:
            branches:
              only:
                - master
    jobs:
      - create_gke_cluster
      - deploy_gke_stockprice:
          requires:
            - create_gke_cluster
