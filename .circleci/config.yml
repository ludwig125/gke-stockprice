version: 2
jobs:
  test:
    docker:
      - image: circleci/golang:1.13
      # CircleCI MySQL Image https://hub.docker.com/r/circleci/mysql/tags
      # https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:8.0.4
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    working_directory: ~/go/src/github.com/ludwig125  # この設定によって、stepsのcheckout時にworking_directory以下にgke-stockpriceリポジトリがgit cloneされる
    #parallelism: 2 # testの並列実行
    environment:
      TZ: Asia/Tokyo # timezoneが合っていないとtestが失敗する
    steps:
      - checkout
      - restore_cache: # 前回の実行以降の変更が検出されなかった場合、保存されているキャッシュを復元
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
        # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: test
          # local（WSL）で実行するときは事前に`sudo service mysql start`が必要
          command: |
            go test -v -race -p 1 ./...
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            # go modで取得したバイナリなどは$GOPATH/pkg/mod/以下にキャッシュされる
            - "/go/pkg/mod"

  build:
    environment:
      PROJECT_NAME: gke-stockprice
      IMAGE_NAME: gke-stockprice
    docker:
      - image: google/cloud-sdk
    working_directory: ~/go/src/github.com/ludwig125
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Setup CLOUD SDK
          command: |
            # base64 -i ignore non-alphabet characters
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud --quiet auth configure-docker
      - run:
          name: Docker Build & Push
          command: |
            docker build -t us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} .
            docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:latest
            if [ -n "${CIRCLE_TAG}" ]; then
              docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_TAG}
            fi
            docker push us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}

  build-nikkei-mock:
    environment:
      PROJECT_NAME: gke-stockprice
      IMAGE_NAME: gke-nikkei-mock
    docker:
      - image: google/cloud-sdk
    working_directory: ~/go/src/github.com/ludwig125/nikkei-mock
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Setup CLOUD SDK
          command: |
            # base64 -i ignore non-alphabet characters
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud --quiet auth configure-docker
      - run:
          name: Docker Build & Push
          command: |
            docker build -t us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} .
            docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:latest
            if [ -n "${CIRCLE_TAG}" ]; then
              docker tag us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}:${CIRCLE_TAG}
            fi
            docker push us.gcr.io/${PROJECT_NAME}/${IMAGE_NAME}

  integration-test:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/go/src/github.com/ludwig125
    environment:
      TZ: Asia/Tokyo # timezoneが合っていないとtestが失敗する
      GO_VERSION: 1.14.1
      PROJECT_NAME: gke-stockprice
    steps:
      - checkout
      - run:
          name: Install wget
          command: |
            apt-get install -y wget
      - run:
          name: Install go
          command: |
            wget https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz
            tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV
            source $BASH_ENV
            go version
      - run:
          name: Install cloud_sql_proxy
          command: |
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            ls -l ./cloud_sql_proxy
      - run:
          name: Activate Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > gke-stockprice-serviceaccount.json
            gcloud auth activate-service-account --key-file gke-stockprice-serviceaccount.json
            gcloud config set project $PROJECT_NAME
      - run:
          name: Set files
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > ./k8s/base/gke-stockprice-serviceaccount.json # integration_test内でkustomize buildするため
            echo -n $INTEGRATION_TEST_SHEETID > k8s/overlays/dev/dev_sheetid.txt
            echo -n ${GMAIL} > ./k8s/overlays/dev/gmail.txt
      - run:
          name: Integration-test
          no_output_timeout: 30m # これを防ぐ：Too long with no output (exceeded 10m0s)
          command: |
            export CREDENTIAL_FILEPATH=gke-stockprice-serviceaccount.json
            export INTEGRATION_TEST_SHEETID=$INTEGRATION_TEST_SHEETID
            export DRIVE_FOLDER_NAME=gke-stockprice-dump-test
            export DRIVE_PERMISSION_GMAIL=${GMAIL}
            go test -v ./... -tags integration -timeout 30m
          # TODO： integration_test後にclusterが無くなっているか確認するステップを入れる

  create_gke_cluster_and_deploy_by_golang:
    working_directory: ~/go/src/github.com/ludwig125 # この設定によって、stepsのcheckout時にworking_directory以下にgke-stockpriceリポジトリがgit cloneされる
    environment:
      PROJECT_NAME: gke-stockprice
      GO_VERSION: 1.14.1
    docker:
      - image: google/cloud-sdk # kubectlを使うのでalpineではない
    steps:
      - checkout
      - run:
          name: Install wget
          command: |
            apt-get install -y wget
      - run:
          name: Install go
          command: |
            wget https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz
            tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV
            source $BASH_ENV
            go version
      - run:
          name: Check gcloud version
          command: gcloud --version
      - run:
          name: Activate Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > gke-stockprice-serviceaccount.json
            gcloud auth activate-service-account --key-file gke-stockprice-serviceaccount.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project ${PROJECT_NAME}
      - run:
          name: Create config & secret
          command: |
            echo ${GCLOUD_SERVICE_KEY} | base64 -di > ./k8s/base/gke-stockprice-serviceaccount.json
            echo -n ${DAILY_PRICE_URL} > ./k8s/overlays/prod/daily_price_url.txt
            echo -n ${PROD_DB_USERNAME} > ./k8s/overlays/prod/db_username.txt
            echo -n ${PROD_DB_PASSWORD} > ./k8s/overlays/prod/db_password.txt
            echo -n ${PROD_SHEET_ID} > ./k8s/overlays/prod/sheetid.txt
            echo -n ${SLACK_TOKEN} > ./k8s/overlays/prod/slack_token.txt
            echo -n ${SLACK_CHANNEL} > ./k8s/overlays/prod/slack_channel.txt
            echo -n ${CIRCLE_API_USER_TOKEN} > ./k8s/overlays/prod/circleci_token.txt
            echo -n ${GMAIL} > ./k8s/overlays/prod/gmail.txt
      - run:
          name: Create GKE Cluster And Deploy
          command: |
            export CREDENTIAL_FILEPATH=gke-stockprice-serviceaccount.json
            export DRIVE_FOLDER_NAME=gke-stockprice-dump
            export DRIVE_PERMISSION_GMAIL=${GMAIL}
            go run cmd/create_cluster_and_deploy/create_cluster_and_deploy.go

  delete_gke_cluster_by_golang:
    working_directory: ~/go/src/github.com/ludwig125
    environment:
      PROJECT_NAME: gke-stockprice
      GO_VERSION: 1.14.1
    docker:
      - image: google/cloud-sdk # kubectlを使うのでalpineではない
    steps:
      - checkout
      - run:
          name: Install wget
          command: |
            apt-get install -y wget
      - run:
          name: Install go
          command: |
            wget https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz
            tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV
            source $BASH_ENV
            go version
      - run:
          name: Check gcloud version
          command: gcloud --version
      - run:
          name: Activate Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > gke-stockprice-serviceaccount.json
            gcloud auth activate-service-account --key-file gke-stockprice-serviceaccount.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project $PROJECT_NAME
      - run:
          name: Delete GKE Cluster
          command: |
            export CREDENTIAL_FILEPATH=gke-stockprice-serviceaccount.json
            export DRIVE_FOLDER_NAME=gke-stockprice-dump
            export DRIVE_PERMISSION_GMAIL=${GMAIL}
            go run cmd/delete_cluster/delete_cluster.go

  list_gke_cluster:
    working_directory: ~/go/src/github.com/ludwig125
    environment:
      PROJECT_NAME: gke-stockprice
      CLUSTER_NAME: gke-stockprice-cluster-prod
      COMPUTE_ZONE: us-central1-f
      CRON_JOB: prod-gke-stockprice
    docker:
      - image: google/cloud-sdk # base64 -iオプションを使うのでalpineではない
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/service_account.json
            gcloud auth activate-service-account --key-file ${HOME}/service_account.json
      - run:
          name: Setup GKE Cluster Infomation
          command: |
            gcloud config set project $PROJECT_NAME
            gcloud config set container/cluster $CLUSTER_NAME
            gcloud config set compute/zone ${COMPUTE_ZONE}
            gcloud container clusters get-credentials $CLUSTER_NAME
      - run:
          name: List GKE Cluster
          command: gcloud container clusters list

workflows:
  version: 2
  master-build:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only: master
      # # buildのあとにdeployを実行したい場合は以下を有効にする
      # - deploy:
      #     requires:
      #       - build

      # integration testを自動で実行したいときは以下を有効にする
      - integration-test:
          requires:
           - build

  # cronで定期実行する
  create-deploy:
    triggers:
      - schedule:
          cron: "0 18 * * *" # 3:00 at JST
          filters:
            branches:
              only:
                - master
    jobs:
      - create_gke_cluster_and_deploy_by_golang
      # - create_gke_cluster
      # - deploy_gke_stockprice:
      #     requires:
      #       - create_gke_cluster
